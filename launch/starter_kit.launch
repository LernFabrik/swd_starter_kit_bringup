<?xml version="1.0"?>

<launch>
  <!-- Default values for arguments -->
  <arg name="master_ip"            default="10.0.0.1"/>
  <!-- lidar_sensor = [idec_se2l | sick_nanoscan3 | pilz_psen] -->
  <arg name="lidar_sensor"         default="idec_se2l"/>
  <arg name="lidar_sensor_ip"      default="10.0.0.5"/>
  <arg name="scan_prefix"          default="laser_1"/>
  <arg name="scan_topic"           default="/$(arg scan_prefix)/scan"/>
  <arg name="scan_frame_id"        default="$(arg scan_prefix)"/>
  <arg name="odom_frame_id"        default="odom"/>
  <arg name="base_frame_id"        default="base_footprint_link"/>
  <arg name="global_frame_id"      default="map"/>
  <arg name="baseline_m"           default="0.485"/>
  <arg name="joy_config"           default="xbox"/>
  <arg name="enable_cmd_vel_mux"   default="true"/>
  <arg name="enable_laser_filter"  default="true"/>
  <arg name="enable_joystick"      default="true"/>
  <arg name="enable_websocket"     default="true" />

  <!-- Navigation parameters
    - nav_mode = [localization | mapping | none]
    - if (nav_mode == localization)
      * nav_algo = [amcl | lama]
      * nav_localization_static_map = /absolute/path/to/map.yaml
    - if (nav_mode == mapping)
      * nav_algo = [hector | lama | gmapping]
    - if (nav_mode == none)
      * no localization nor mapping algorithm will be used
  -->
  <arg name="nav_mode" default="localization"/>
  <arg name="nav_algo" default="amcl"/>
  <!--arg name="nav_localization_static_map" default="$(find swd_starter_kit_bringup)/assets/map_box2_v2.yaml"/-->

  <!-- SWD ROS Controllers (diff-drive) -->
  <include file="$(find swd_ros_controllers)/launch/swd_diff_drive_controller.launch">
    <arg name="baseline_m"  value="$(arg baseline_m)"/>
    <arg name="base_frame"  value="$(arg base_frame_id)"/>
    <arg name="odom_frame"  value="$(arg odom_frame_id)"/>
  </include>

  <!-- Filter LiDAR ranges -->
  <include file="$(dirname)/laser_filter.launch" if="$(arg enable_laser_filter)">
    <arg name="scan_prefix" value="$(arg scan_prefix)"/>
  </include>

  <!-- Include LiDAR launch file according to lidar_sensor argument -->
  <include file="$(dirname)/lidar_$(arg lidar_sensor).launch">
    <arg name="sensor_ip" value="$(arg lidar_sensor_ip)" />
    <arg name="master_ip" value="$(arg master_ip)" />
    <arg name="prefix"    value="$(arg scan_prefix)" />

    <!-- When laser_filter is disabled, map the scan_raw to scan, which will be
         used by navigation nodes -->
    <remap from="$(arg prefix)/scan_raw" to="$(arg prefix)/scan" unless="$(arg enable_laser_filter)" />
  </include>

  <!--
      Load launch files of different navigation modes
      Currently, we supports two main modes:
      - mapping: A mode for creating new maps for unknown environments.
        This mode supports two algotithms (nav_algo argument):
        - lama: to uses the IRIS LAMA SLAM
        - hector: to use hector_mapping
        - gmapping: to use slam_gmapping

      - localization: A mode which provides localization for a robot in a known map.
        This mode supports the following algorithms (nav_algo argument):
        - amcl: to use the Adaptive Monte Carlo Localization (AMCL)
        - lama: to use the loc2d_ros from LAMA SLAM package
  -->
  <!--include file="$(dirname)/$(arg nav_mode)_$(arg nav_algo).launch" unless="$(eval arg('nav_mode') == 'none')">
    <arg name="scan_topic"       value="$(arg scan_topic)"/>
    <arg name="odom_frame_id"    value="$(arg odom_frame_id)"/>
    <arg name="base_frame_id"    value="$(arg base_frame_id)"/>
    <arg name="global_frame_id"  value="$(arg global_frame_id)"/>
    <arg name="out_pose_topic"   value="amcl_pose"/>
  </include-->

  <!-- Load map to be used for localization -->
  <!--group if="$(eval arg('nav_mode') == 'localization')">
    <node pkg="map_server" name="map_server" type="map_server"
          args="$(arg nav_localization_static_map)">
      <param name="frame_id" value="$(arg global_frame_id)" />
    </node>
  </group-->

  <!-- Websocket bridge (for HMI) -->
  <!--group if="$(arg enable_websocket)">
    <node pkg="rosbridge_server" name="rosbridge_websocket" type="rosbridge_websocket">
      <param name="address" value="$(arg master_ip)" />
      <param name="use_compression" value="true" />
    </node>

    <node pkg="tf2_web_republisher" name="tf2_web_republisher" type="tf2_web_republisher" />
  </group-->

  <!-- Joystick + teleop -->
  <group if="$(arg enable_joystick)">
    <node pkg="joy" name="xbox_joystick" type="joy_node">
      <param name="autorepeat_rate" value="50" />
    </node>

    <node pkg="teleop_twist_joy" name="teleop_twist_joy" type="teleop_node">
      <param name="joy_config" value="$(arg joy_config)" />
      <param name="enable_button" value="5" />
      <param name="enable_turbo_button" value="6" />
      <param name="axis_linear" value="1" />
      <param name="axis_angular" value="3" />
      <param name="scale_linear" value="1.0" />
      <param name="scale_angular" value="0.7" />
      <param name="scale_linear_turbo" value="1.3" />
      <param name="scale_angular_turbo" value="1.4" />

      <!-- When enable_cmd_vel_mux==true, the teleop_twist_joy output is connected to the mux's default input -->
      <remap from="/cmd_vel" to="/joy_cmd_vel" if="$(arg enable_cmd_vel_mux)" />
      <!-- Otherwise, the teleop_twist_joy is connected directly to the
           controller's velocity command input /swd_diff_drive_controller/cmd_vel -->
      <remap from="/cmd_vel" to="/swd_diff_drive_controller/cmd_vel" unless="$(arg enable_cmd_vel_mux)" />
    </node>
  </group>

  <!-- Create a mux for cmd_vel if enabled -->
  <group if="$(arg enable_cmd_vel_mux)">
    <node pkg="topic_tools" name="mux_cmd_vel" type="mux"
          args="/swd_diff_drive_controller/cmd_vel /joy_cmd_vel /key_cmd_vel /remote_cmd_vel /nav_cmd_vel" >
      <param name="mux" value="mux_cmd_vel" />
    </node>
  </group>

  <!-- Robot manager -->
  <node pkg="swd_robot_manager" name="robot_manager" type="robot_manager" />

  <!-- Republish Pose from TF tree -->
  <node pkg="swd_robot_manager" name="pose_from_tf" type="pose_from_tf">
    <param name="base_frame" value="$(arg base_frame_id)" />
    <param name="ref_frame" value="$(arg global_frame_id)" />
    <param name="publish_rate" value="20.0" />
    <param name="topic_name" value="/pose_from_tf" />
  </node>

  <!-- Robot state publisher, using the URDF model -->
  <param name="robot_description" textfile="$(find swd_starter_kit_description)/urdf/swd_starter_kit.urdf" />
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

</launch>
